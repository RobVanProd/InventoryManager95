# Generated by Django 5.1.4 on 2024-12-09 23:38

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0004_supplier_remove_inventoryitem_price_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReorderPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum_quantity', models.IntegerField(help_text='Minimum quantity before reorder is triggered', validators=[django.core.validators.MinValueValidator(0)])),
                ('reorder_quantity', models.IntegerField(help_text='Quantity to order when reorder point is reached', validators=[django.core.validators.MinValueValidator(1)])),
                ('safety_stock', models.IntegerField(default=0, help_text='Extra stock kept to prevent stockouts', validators=[django.core.validators.MinValueValidator(0)])),
                ('lead_time_days', models.IntegerField(default=1, help_text='Expected number of days between order and delivery', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether automatic reordering is enabled for this item')),
                ('last_reorder_date', models.DateTimeField(blank=True, help_text='Date of the last automatic reorder', null=True)),
                ('seasonal_adjustment', models.DecimalField(decimal_places=2, default=1.0, help_text='Seasonal adjustment factor for reorder calculations', max_digits=5)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reorder_point', to='inventory.inventoryitem')),
                ('preferred_supplier', models.ForeignKey(blank=True, help_text='Preferred supplier for reordering this item', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('LOW_STOCK', 'Low Stock'), ('STOCKOUT', 'Stockout'), ('REORDER_FAILED', 'Reorder Failed'), ('ORDER_PLACED', 'Order Placed'), ('DELIVERY_DUE', 'Delivery Due')], max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the alert was resolved', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the alert is still active')),
                ('auto_reorder_triggered', models.BooleanField(default=False, help_text='Whether this alert triggered an automatic reorder')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to='inventory.inventoryitem')),
                ('related_purchase_order', models.ForeignKey(blank=True, help_text='Purchase order created in response to this alert', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.purchaseorder')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
